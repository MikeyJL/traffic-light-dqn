"""Results analysis.ipynb

Automatically generated by Colaboratory.
"""
# pylint: skip-file

import tensorboard as tb
import seaborn as sns
from scipy.stats import shapiro, f_oneway
from operator import itemgetter

sns.set(rc={"figure.figsize": (12, 9)}, palette="binary_r", style="whitegrid")

experiment_id = "TBqZnp88QfOqJaWZJom9jA"
experiment = tb.data.experimental.ExperimentFromDev(experiment_id)
df = experiment.get_scalars()

runs = [
    "Aug20_13-07-18_MLP-0",
    "Aug20_13-47-43_MLP-1",
    "Aug20_15-48-06_MLP-2",
    "Aug20_16-14-41_NO-AI",
]
latest_df = df[df["run"].isin(runs)].replace(
    {"run": {runs[0]: "MLP-0", runs[1]: "MLP-1", runs[2]: "MLP-2", runs[3]: "NO-AI"}}
)

"""## Average time loss"""

avg_time_loss = latest_df[latest_df["tag"] == "Avg. time loss"]
avg_time_loss_grouped = avg_time_loss.drop(["step"], axis=1).groupby("run")
avg_time_loss_grouped.describe().round(2)

for group in avg_time_loss_grouped.groups:
    p_value = shapiro(avg_time_loss_grouped.groups[group])[1]
    print(f"{group}: {'Is Normal' if p_value > 0.05 else 'Not Normal'}, {p_value}")

sns.boxplot(x="run", y="value", data=avg_time_loss).set(
    xlabel="Run", ylabel="Average time loss (s)"
)

sns.lineplot(x="step", y="value", hue="run", data=avg_time_loss).set(
    xlabel="Time step", ylabel="Average time loss (s)"
)

m0, m1, m2, no_ai = itemgetter("MLP-0", "MLP-1", "MLP-2", "NO-AI")(
    avg_time_loss_grouped.groups
)
f_oneway(m0, m1, m2, no_ai)

"""## Average waiting time"""

avg_wait_time = latest_df[latest_df["tag"] == "Avg. waiting time"]
avg_wait_time_grouped = avg_wait_time.drop(["step"], axis=1).groupby("run")
avg_wait_time_grouped.describe().round(2)

for group in avg_wait_time_grouped.groups:
    p_value = shapiro(avg_wait_time_grouped.groups[group])[1]
    print(f"{group}: {'Is Normal' if p_value > 0.05 else 'Not Normal'}, {p_value}")

sns.boxplot(x="run", y="value", data=avg_wait_time).set(
    xlabel="Run", ylabel="Average waiting time (s)"
)

sns.lineplot(x="step", y="value", hue="run", data=avg_wait_time).set(
    xlabel="Time step", ylabel="Average waiting time (s)"
)

m0, m1, m2, no_ai = itemgetter("MLP-0", "MLP-1", "MLP-2", "NO-AI")(
    avg_wait_time_grouped.groups
)
f_oneway(m0, m1, m2, no_ai)

"""## Vehicle count"""

vehicle_count = latest_df[latest_df["tag"] == "Vehicle count"]
vehicle_count_grouped = vehicle_count.drop(["step"], axis=1).groupby("run")
vehicle_count_grouped.describe().round(2)

for group in vehicle_count_grouped.groups:
    p_value = shapiro(vehicle_count_grouped.groups[group])[1]
    print(f"{group}: {'Is Normal' if p_value > 0.05 else 'Not Normal'}, {p_value}")

sns.boxplot(x="run", y="value", data=vehicle_count).set(
    xlabel="Run", ylabel="Vehicle count"
)

sns.lineplot(x="step", y="value", hue="run", data=vehicle_count).set(
    xlabel="Time step", ylabel="Vehicle count"
)

m0, m1, m2, no_ai = itemgetter("MLP-0", "MLP-1", "MLP-2", "NO-AI")(
    vehicle_count_grouped.groups
)
f_oneway(m0, m1, m2, no_ai)

"""## Episode reward"""

eps_reward = latest_df[
    (latest_df["tag"] == "Episode reward") & (latest_df["run"] != "NO-AI")
]
eps_reward_grouped = eps_reward.drop(["step"], axis=1).groupby("run")
eps_reward_grouped.describe().round(2)

for group in eps_reward_grouped.groups:
    p_value = shapiro(eps_reward_grouped.groups[group])[1]
    print(f"{group}: {'Is Normal' if p_value > 0.05 else 'Not Normal'}, {p_value}")

sns.boxplot(x="run", y="value", data=eps_reward).set(
    xlabel="Run", ylabel="Episode reward"
)

sns.lineplot(x="step", y="value", hue="run", data=eps_reward).set(
    xlabel="Time step", ylabel="Episode reward"
)

m0, m1, m2 = itemgetter("MLP-0", "MLP-1", "MLP-2")(eps_reward_grouped.groups)
f_oneway(m0, m1, m2)
